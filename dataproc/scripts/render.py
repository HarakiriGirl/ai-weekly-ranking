#!/usr/bin/env python3
"""
週次レポート生成スクリプト
- weekly/*.parquet からランキングデータ読み込み
- ジャンル別TOP3をMarkdown形式で出力
- NEW判定・スコア表示
- reports/*.md として保存
"""

import pandas as pd
import yaml
from pathlib import Path
from datetime import datetime
import argparse

def get_current_week():
    """現在の週番号取得 (ISO週番号)"""
    now = datetime.now()
    year, week, _ = now.isocalendar()
    return f"{year}-W{week:02d}"

def load_genres():
    """ジャンル定義読み込み"""
    genres_path = Path("dataproc/config/genres.yml")
    
    if not genres_path.exists():
        return ['multi-ai', 'image', 'video', 'music', 'voice', 'research', 'coding', 'agent-workflow']
    
    with open(genres_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f) or []

def load_ranking_data(week):
    """ランキングデータ読み込み"""
    weekly_dir = Path("dataproc/aggregated")
    ranking_file = weekly_dir / f"{week}.parquet"
    
    if not ranking_file.exists():
        print(f"No ranking data found: {ranking_file}")
        return pd.DataFrame()
    
    print(f"Reading ranking data: {ranking_file}")
    return pd.read_parquet(ranking_file)

def get_genre_display_name(genre):
    """ジャンル表示名取得"""
    display_names = {
        'multi-ai': '🤖 汎用AI・チャットボット',
        'image': '🎨 画像生成・編集',
        'video': '🎬 動画生成・編集', 
        'music': '🎵 音楽・音声生成',
        'voice': '🎙️ 音声認識・合成',
        'research': '📚 研究・分析・論文',
        'coding': '💻 プログラミング支援',
        'agent-workflow': '🔄 自動化・エージェント'
    }
    return display_names.get(genre, f'📊 {genre.title()}')

def format_score(score):
    """スコア表示フォーマット"""
    if score >= 10:
        return f"{score:.0f}pt"
    else:
        return f"{score:.1f}pt"

def get_week_period(week):
    """週の期間表示"""
    year, week_num = week.split('-W')
    year, week_num = int(year), int(week_num)
    
    # ISO週番号から日付計算
    jan4 = datetime(year, 1, 4)
    week_start = jan4 + pd.Timedelta(weeks=week_num-1) - pd.Timedelta(days=jan4.weekday())
    week_end = week_start + pd.Timedelta(days=6)
    
    return f"{week_start.strftime('%Y/%m/%d')} - {week_end.strftime('%m/%d')}"

def generate_report(week=None):
    """レポート生成メイン処理"""
    
    if week is None:
        week = get_current_week()
    
    print(f"Generating report for week: {week}")
    
    # データ読み込み
    genres = load_genres()
    rankings_df = load_ranking_data(week)
    
    if rankings_df.empty:
        print("No ranking data available")
        # 空のレポート生成
        content = generate_empty_report(week, genres)
    else:
        print(f"Loaded {len(rankings_df)} rankings")
        content = generate_full_report(week, genres, rankings_df)
    
    # ファイル保存
    reports_dir = Path("dataproc/reports")
    reports_dir.mkdir(exist_ok=True)
    
    output_path = reports_dir / f"{week}.md"
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"Report saved: {output_path}")
    return output_path

def generate_empty_report(week, genres):
    """空のレポート生成"""
    week_period = get_week_period(week)
    
    content = f"""# AIツール週次ランキング {week}

**集計期間:** {week_period}  
**データ更新:** {datetime.now().strftime('%Y/%m/%d %H:%M')}

---

## 📊 今週のハイライト

今週はランキング対象となるAIツールの言及が検出されませんでした。

---

"""
    
    # 各ジャンルに空のセクション追加
    for genre in genres:
        display_name = get_genre_display_name(genre)
        content += f"""## {display_name}

今週はランキング対象のツールが検出されませんでした。

---

"""
    
    content += f"""## 📈 データについて

- **対象ソース:** Reddit AI関連サブレディット、YouTube技術チャンネル、AI関連RSSフィード
- **スコア計算:** 言及回数 × ソース重み + 前週スコア × 0.5
- **ランキング:** 各ジャンルTOP3を表示

---

*Generated by AI Weekly Ranking Pipeline v2*
"""
    
    return content

def generate_full_report(week, genres, rankings_df):
    """完全レポート生成"""
    week_period = get_week_period(week)
    
    # ハイライト情報収集
    total_tools = len(rankings_df['tool'].unique())
    new_tools = rankings_df[rankings_df['is_new'] == True]['tool'].unique()
    top_score = rankings_df['score'].max() if not rankings_df.empty else 0
    
    content = f"""# AIツール週次ランキング {week}

**集計期間:** {week_period}  
**データ更新:** {datetime.now().strftime('%Y/%m/%d %H:%M')}

---

## 📊 今週のハイライト

- **ランクイン:** {total_tools}ツール
- **最高スコア:** {format_score(top_score)}

---

"""
    
    # ジャンル別ランキング
    for genre in genres:
        display_name = get_genre_display_name(genre)
        genre_rankings = rankings_df[rankings_df['genre'] == genre].sort_values('rank')
        
        content += f"## {display_name}\n\n"
        
        if genre_rankings.empty:
            content += "今週はランキング対象のツールが検出されませんでした。\n\n"
        else:
            for _, row in genre_rankings.iterrows():
                rank = row['rank']
                tool = row['tool']
                score = row['score']
                
                # ランキング表示
                if rank == 1:
                    medal = "🥇"
                elif rank == 2:
                    medal = "🥈"
                elif rank == 3:
                    medal = "🥉"
                else:
                    medal = f"{rank}."
                
                content += f"{medal} **{tool}** - {format_score(score)}\n\n"
        
        content += "---\n\n"
    
    content += f"""## 📈 データについて

- **対象ソース:** Reddit AI関連サブレディット、YouTube技術チャンネル、AI関連RSSフィード
- **スコア計算:** 言及回数 × ソース重み + 前週スコア × 0.5
- **ランキング:** 各ジャンルTOP3を表示

---

*Generated by AI Weekly Ranking Pipeline v2*
"""
    
    return content

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate weekly ranking report')
    parser.add_argument('--week', type=str, help='Week in YYYY-WXX format (default: current week)')
    
    args = parser.parse_args()
    generate_report(args.week)